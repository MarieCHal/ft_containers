* * * * * * * * * * * * * * * * * * * * 
*                                     * 
*             VECTOR                  * 
*                                     * 
* * * * * * * * * * * * * * * * * * * * 

˙ ===================================== 
 =          constructors             =
 ===================================== 

      initialized constructor      
--- content of : vector ---
c
c
c
size: 3
capcity: 3


 . . . . . . . . . . . . . . . .

      copy constructor      
--- content of : vector copy ---
c
c
c
size: 3
capcity: 3


 . . . . . . . . . . . . . . . .

       constructor with iterator range    
--- content of : vector iterator range ---
c
c
c
size: 3
capcity: 3


 . . . . . . . . . . . . . . . .

 ===================================== 
 =          member functions         =
 ===================================== 

      operator =       
--- content of : vector equal ---
c
c
c
size: 3
capcity: 3


 . . . . . . . . . . . . . . . .

      assign(size, value_type)      
--- content of : before ---
c
c
c
size: 3
capcity: 3

--- content of : after assigning 4 times 'g'  ---
g
g
g
g
size: 4
capcity: 4


 . . . . . . . . . . . . . . . .

      assign(it, it)      
--- content of : after assigning  ---
c
c
c
1
2
3
4
size: 7
capcity: 7


 . . . . . . . . . . . . . . . .

--- content of : vector ---
c
c
c
1
2
3
4
o
l
l
a
size: 11
capcity: 11

      at()     
vector at pos 3: 1
vector at pos 3: 4
vector at pos 3: l

 . . . . . . . . . . . . . . . .

      operator[]     
vector at pos 3: 1
vector at pos 3: 4
vector at pos 3: l

 . . . . . . . . . . . . . . . .

      front()     
vector at front pos : c

 . . . . . . . . . . . . . . . .

      const front()     
vector at const front pos : c

 . . . . . . . . . . . . . . . .

      back()     
vector at back pos : a

 . . . . . . . . . . . . . . . .

      const back()     
vector at back pos : a

 . . . . . . . . . . . . . . . .

      data()     
vector data: ccc1234olla

 . . . . . . . . . . . . . . . .

     const data()     
vector data: ccc1234olla

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          iterators                =
 ===================================== 

      begin()     
vector at iterator begin : c

 . . . . . . . . . . . . . . . .

      const begin()     
vector at iterator begin : c

 . . . . . . . . . . . . . . . .

      end()     
vector at iterator end++ : c

 . . . . . . . . . . . . . . . .

      const end()     
vector at iterator end++ : c

 . . . . . . . . . . . . . . . .

      rbegin()     
vector at iterator rbeg : a

 . . . . . . . . . . . . . . . .

      const rbegin()     
vector at iterator rbeg : a

 . . . . . . . . . . . . . . . .

      rend()     
vector at iterator rend : -2

 . . . . . . . . . . . . . . . .

      const rend()     
vector at iterator rend : -2

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          capacity                 =
 ===================================== 

      empty()     
vector is empty: 0
 . . . . . . . . . . . . . . . .

      size()     
vector size: 11
 . . . . . . . . . . . . . . . .

      reserve() / capcity()    
vector capacity before: 14vector capacity after reserving 4: 14
 . . . . . . . . . . . . . . . .

      clear()    
--- content of : vector cleared ---
size: 0
capcity: 0


 . . . . . . . . . . . . . . . .

      insert(iter, iter)    
--- content of : vector after re-inserting ---
c
c
c
1
2
3
4
size: 7
capcity: 7


 . . . . . . . . . . . . . . . .

      insert(pos, n, val)    
--- content of : vector after inserting 3 times 'p'  ---
p
p
p
c
c
c
1
2
3
4
size: 10
capcity: 10


 . . . . . . . . . . . . . . . .

      insert(pos, val)    
--- content of : vector after inserting x  ---
p
p
x
p
c
c
c
1
2
3
4
size: 11
capcity: 11


 . . . . . . . . . . . . . . . .

      erase(pos)    
--- content of : vector after ersase ---
p
x
p
c
c
c
1
2
3
4
size: 10
capcity: 10


 . . . . . . . . . . . . . . . .

      erase()    
--- content of : vector after erase ---
c
c
c
1
2
3
4
size: 7
capcity: 7


 . . . . . . . . . . . . . . . .

      puch_back()    
--- content of : vector before push back ---
c
c
c
1
2
3
4
size: 7
capcity: 7

--- content of : vector after push back ---
c
c
c
1
2
3
4
1
2
3
size: 10
capcity: 10


 . . . . . . . . . . . . . . . .

      pop_back()    
--- content of : vector before pop back ---
c
c
c
1
2
3
4
1
2
3
size: 10
capcity: 10

--- content of : vector after pop back ---
c
c
c
1
2
3
4
1
size: 8
capcity: 8


 . . . . . . . . . . . . . . . .

      resize()    
vector capacity before resize 2: 14
--- content of : vector after resize 2 ---
c
c
size: 2
capcity: 2

vector capacity before resize 100: 14
--- content of : vector after resize 100 ---
c
c
size: 2
capcity: 2


 . . . . . . . . . . . . . . . .

      swap()    
--- content of : vector 1 ---
c
c
size: 2
capcity: 2

--- content of : vector 2 ---
l
a
l
a
size: 4
capcity: 4

--- content of : vector 1 ---
l
a
l
a
size: 4
capcity: 4

--- content of : vector 2 ---
c
c
size: 2
capcity: 2


 . . . . . . . . . . . . . . . .

 ===================================== 
 =          non member functions     =
 ===================================== 

--- content of : vector 1 ---
1
2
3
4
5
6
size: 6
capcity: 6

--- content of : vector 2 ---
1
22
3
43
55
66
24
3
size: 8
capcity: 8

--- content of : vector 3 ---
1
2
3
4
6
5
size: 6
capcity: 6

      operator==()    
v2 == v1 ? :0
v3 == v1 ? :0
v2 == v3 ? :0
v1 == v1 copy ? :1

 . . . . . . . . . . . . . . . .

      operator!=()    
v2 != v1 ? :1
v3 != v1 ? :1
v2 != v3 ? :1
v1 != v1 copy ? :0

 . . . . . . . . . . . . . . . .

      operator<()    
v2 < v1 ? :0
v3 < v1 ? :0
v2 < v3 ? :0
v1 < v1 copy ? :0

 . . . . . . . . . . . . . . . .

      operato>()    
v2 > v1 ? :1
v3 > v1 ? :1
v2 > v3 ? :1
v1 > v1 copy ? :0

 . . . . . . . . . . . . . . . .

      operator<=()    
v2 <= v1 ? :0
v3 <= v1 ? :0
v2 <= v3 ? :0
v1 <= v1 copy ? :1

 . . . . . . . . . . . . . . . .

      operator>=()    
v2 >= v1 ? :1
v3 >= v1 ? :1
v2 >= v3 ? :1
v1 >= v1 copy ? :1

 . . . . . . . . . . . . . . . .

      swap(vect1, vect2)    
--- content of : v1 before swap ---
1
2
3
4
5
6
size: 6
capcity: 6

--- content of : v2 before swap ---
1
22
3
43
55
66
24
3
size: 8
capcity: 8

--- content of : v1 after swap ---
1
22
3
43
55
66
24
3
size: 8
capcity: 8

--- content of : v2 after swap ---
1
2
3
4
5
6
size: 6
capcity: 6


 . . . . . . . . . . . . . . . .

* * * * * * * * * * * * * * * * * * * * 
*                                     * 
*             STACK                   * 
*                                     * 
* * * * * * * * * * * * * * * * * * * * 

˙    push/top/pop      
this is the top of the stack: haayayaya
this is the top of the stack: jsslsm
this is the top of the stack: jaSoisIaCipiame
this is the top of the stack: JeSuiiIsLaaaQuatriiieeemmeee
this is the top of the stack: Jesuiiis la troiisieme
this is the top of the stack: je suis la deuxieme
this is the top of the stack: je suis la premiere
    stack empty   
      operator==()    
s2 == s1 ? :1
s3 == s1 ? :0
s2 == s3 ? :0

 . . . . . . . . . . . . . . . .

      operator!=()    
s2 != s1 ? :0
s3 != s1 ? :1
s2 != s3 ? :1

 . . . . . . . . . . . . . . . .

      operator<()    
s2 < s1 ? :0
s3 < s1 ? :0
s2 < s3 ? :1

 . . . . . . . . . . . . . . . .

      operato>()    
s2 > s1 ? :0
s3 > s1 ? :1
s2 > s3 ? :0

 . . . . . . . . . . . . . . . .

      operator<=()    
s2 <= s1 ? :1
s3 <= s1 ? :0
s2 <= s3 ? :1

 . . . . . . . . . . . . . . . .

      operator>=()    
s2 >= s1 ? :1
s3 >= s1 ? :1
s2 >= s3 ? :0

 . . . . . . . . . . . . . . . .

* * * * * * * * * * * * * * * * * * * * 
*                                     * 
*             MAP                     * 
*                                     * 
* * * * * * * * * * * * * * * * * * * * 

˙ ===================================== 

 =          constructors             =
 ===================================== 

--- content of : map ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
map size: 3

 . . . . . . . . . . . . . . . .

      copy constructor      
--- content of : map ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
map size: 3
--- content of : map_copy ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
map size: 3

 . . . . . . . . . . . . . . . .

      iterator constructor      
--- content of : map ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
map size: 3
--- content of : map_iter ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
map size: 3

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          element access           =
 ===================================== 

      at      
map value at key 2: b

 . . . . . . . . . . . . . . . .

      operator[]      
map value at [2]: b
-> add val t at [4]
--- content of : map ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
first: 4 second: t
map size: 4

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          iterators                =
 ===================================== 

      begin()      
map at begin(): 0, a

 . . . . . . . . . . . . . . . .

      end()      
map at end()--: 4, t

 . . . . . . . . . . . . . . . .

      rbegin() -> reverse iterator     
map at rbegin(): 4, t


 . . . . . . . . . . . . . . . .

      const rbegin() -> const reverse iterator     
map at const begin(): 4, t

map at const begin() ++ : 2, b

 . . . . . . . . . . . . . . . .

      rend() -> reverse iterator     
map at rend(): 0, a

 . . . . . . . . . . . . . . . .

      const rend() -> const reverse iterator     
map at const rend(): 0, a

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          capcity                  =
 ===================================== 

      empty()     
map: 0

 . . . . . . . . . . . . . . . .

      size()     
map: 4

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          modifiers                  =
 ===================================== 

      clear()     
--- content of : before ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
map size: 3
--- content of : after ---
map size: 0

 . . . . . . . . . . . . . . . .

      insert(val)      
--- content of : before ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
first: 4 second: t
map size: 4
--- content of : after ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
first: 4 second: t
first: 8 second: f
map size: 5

 . . . . . . . . . . . . . . . .

      insert(it1, it2)      
--- content of : before inserting [3, p], [11, q], [56, l]  ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
first: 4 second: t
first: 8 second: f
map size: 5
--- content of : after ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
first: 3 second: p
first: 4 second: t
first: 8 second: f
first: 11 second: q
first: 56 second: l
map size: 8

 . . . . . . . . . . . . . . . .

      erase(key)      
--- content of : before ---
first: 0 second: a
first: 1 second: z
first: 2 second: b
first: 3 second: p
first: 4 second: t
first: 8 second: f
first: 11 second: q
first: 56 second: l
map size: 8
 erasing element at pos: begin++ (z) 
--- content of : after ---
first: 0 second: a
first: 2 second: b
first: 3 second: p
first: 4 second: t
first: 8 second: f
first: 11 second: q
first: 56 second: l
map size: 7

 . . . . . . . . . . . . . . . .

      erase(iter1, iter2)      
--- content of : before ---
first: 0 second: a
first: 2 second: b
first: 3 second: p
first: 4 second: t
first: 8 second: f
first: 11 second: q
first: 56 second: l
map size: 7
 erasing from pos 2 to 11
--- content of : after ---
first: 0 second: a
first: 11 second: q
first: 56 second: l
map size: 3

 . . . . . . . . . . . . . . . .

      swap(map)      
--- content of : map1 before  ---
first: 3 second: p
first: 11 second: q
first: 56 second: l
map size: 3
--- content of : map2 before  ---
first: 0 second: a
first: 11 second: q
first: 56 second: l
map size: 3
--- content of : map1 after  ---
first: 0 second: a
first: 11 second: q
first: 56 second: l
map size: 3
--- content of : map2 after  ---
first: 3 second: p
first: 11 second: q
first: 56 second: l
map size: 3

 . . . . . . . . . . . . . . . .

      count()      
 number of key 64 in map: 0
 number of key 3 in map: 1

 . . . . . . . . . . . . . . . .

      find(key)      
element at found in map with key 3: 3, p

 . . . . . . . . . . . . . . . .

 ===================================== 
 =          lookup                   =
 ===================================== 

      lower_bound(key)      
--- content of : std_map ---
first: 3 second: p
first: 4 second: e
first: 8 second: j
first: 11 second: q
first: 56 second: l
map size: 5
std lower bound of 8: 8, j

 . . . . . . . . . . . . . . . .

      upper_bound(key)      
std upper bound of 8: 11, q

 . . . . . . . . . . . . . . . .

      equal_range(key)      
std range for key 8: 8 to 11

 . . . . . . . . . . . . . . . .

